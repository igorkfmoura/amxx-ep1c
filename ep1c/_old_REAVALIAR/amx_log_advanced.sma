/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
// #include <geoip>

#define PLUGIN "Amx Log Advanced"
#define VERSION "1.5"
#define AUTHOR "aaarnas + lonewolf"

/* ---------- There you can edit logs directories ---------- */
#define CONNECT_LOG_DIR "logs/amx_log"
#define DISCONNECT_LOG_DIR "logs/amx_log"
#define SAY_CHAT_DIR "logs/amx_log/chat"

new g_msgSayText
new cvar_log_type
new cvar_log_type_data
new cvar_log_info_chat
new cvar_log_chat_sound
new cvar_log_data
new cvar_log_chat_data
new cvar_log_console
new cvar_log_dubbing
new cvar_log_chat
new cvar_log_chat_dubbing
new cvar_log_delete_days
new cvar_log_player_flag
new cvar_log_separate_by_flag
new cvar_log_bots

new months
new days
new years
new delete_date[3][30]

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	g_msgSayText = get_user_msgid("SayText")
	cvar_log_type = register_cvar("amx_log_connect_type", "1")
	cvar_log_type_data = register_cvar("amx_log_type_data", "3")
	cvar_log_info_chat = register_cvar("amx_log_info_chat", "1")
	cvar_log_chat_sound = register_cvar("amx_log_chat_sound", "1")
	cvar_log_data = register_cvar("amx_log_data", "abcdef")
	cvar_log_chat_data = register_cvar("amx_log_chat_data", "acde")
	cvar_log_console = register_cvar("amx_log_console", "0")
	cvar_log_dubbing = register_cvar("amx_log_dubbing", "0")
	cvar_log_chat = register_cvar("amx_log_chat", "3")
	cvar_log_chat_dubbing = register_cvar("amx_log_chat_dubbing", "1")
	cvar_log_delete_days = register_cvar("amx_log_delete_days", "7")
	cvar_log_player_flag = register_cvar("amx_log_player_flag", "0")
	cvar_log_separate_by_flag = register_cvar("amx_log_separate_by_flag", "0")
	cvar_log_bots = register_cvar("amx_log_bots", "0")
	register_cvar("amx_log_version", VERSION, FCVAR_SERVER|FCVAR_SPONLY)
	set_cvar_string("amx_log_advanced_version", VERSION)
	register_clcmd("say", "client_say")
	register_clcmd("say_team", "client_say_team")
	
	set_map_names()
	new cvar_delete = get_pcvar_num(cvar_log_delete_days), num
	if(cvar_delete) {
		get_delete_date(cvar_delete)
		num = delete_old_files()
	}
	
	server_print("--- %s %s by %s ---", PLUGIN, VERSION, AUTHOR)
	if(cvar_delete) server_print("Deleted %d old log files.", num)
}

public client_putinserver(id) {
	
	if(is_user_bot(id) && !get_pcvar_num(cvar_log_bots)) return PLUGIN_CONTINUE
	
	new data = get_pcvar_num(cvar_log_type_data)
	new console = get_pcvar_num(cvar_log_console)
	new chat = get_pcvar_num(cvar_log_info_chat)
	new separate = get_pcvar_num(cvar_log_separate_by_flag)
	new flags_string[23], flags, flagged_player
	get_pcvar_string(cvar_log_player_flag, flags_string, charsmax(flags_string))
	
	if(flags_string[0] == '0') flags = 0
	else flags = read_flags(flags_string)
	
	if(get_user_flags(id) & flags) flagged_player = true
	else if(flags == 0) separate = true
	
	if((flagged_player || separate) && get_pcvar_num(cvar_log_type) == 1 && 
	((data == 1 || data > 2) || console || chat)) print_details(id, data, console, chat, flagged_player, separate,  0)
	
	return PLUGIN_CONTINUE
}

public client_connect(id) {
	
	if(is_user_bot(id) && !get_pcvar_num(cvar_log_bots)) return PLUGIN_CONTINUE
	
	new data = get_pcvar_num(cvar_log_type_data)
	new console = get_pcvar_num(cvar_log_console)
	new chat = get_pcvar_num(cvar_log_info_chat)
	new separate = get_pcvar_num(cvar_log_separate_by_flag)
	new flags_string[23], flags, flagged_player
	get_pcvar_string(cvar_log_player_flag, flags_string, charsmax(flags_string))
	
	if(flags_string[0] == '0') flags = 0
	else flags = read_flags(flags_string)
	 
	if(get_user_flags(id) & flags) flagged_player = true
	else if(flags == 0) separate = true
	
	if((flagged_player || separate) && get_pcvar_num(cvar_log_type) == 2 && 
	((data == 2 || data > 2) || console || chat)) print_details(id, data, console, chat, flagged_player, separate, 0)
	
	return PLUGIN_CONTINUE
}

public client_disconnected(id) {
	
	if(is_user_bot(id) && !get_pcvar_num(cvar_log_bots)) return PLUGIN_CONTINUE
	
	new data = get_pcvar_num(cvar_log_type_data)
	new console = get_pcvar_num(cvar_log_console)
	new chat = get_pcvar_num(cvar_log_info_chat)
	new separate = get_pcvar_num(cvar_log_separate_by_flag)
	new flags_string[23], flags, flagged_player
	get_pcvar_string(cvar_log_player_flag, flags_string, charsmax(flags_string))
	
	if(flags_string[0] == '0') flags = 0
	else flags = read_flags(flags_string)
	
	if(get_user_flags(id) & flags) flagged_player = true
	else if(flags == 0) separate = true
	
	if((flagged_player || separate) && (data > 1 || console || chat)) print_details(id, data, console, chat, flagged_player, separate, 1)
	
	return PLUGIN_CONTINUE
}

public client_say(id) {

	if(is_user_bot(id) && !get_pcvar_num(cvar_log_bots)) return PLUGIN_CONTINUE
	
	new cvar_value = get_pcvar_num(cvar_log_chat)
	new separate = get_pcvar_num(cvar_log_separate_by_flag)
	new player_flags = get_user_flags(id)
	new flags_string[23]
	get_pcvar_string(cvar_log_player_flag, flags_string, charsmax(flags_string))
	new flags 
	if(flags_string[0] == '0') flags = 0
	else flags = read_flags(flags_string)
		
	if((cvar_value == 1 || cvar_value == 3) && (flags == 0 || (player_flags & flags) || separate)) {
		
		new main_holder[200], args[150], cur_date[20], cur_hours[20], len, name[64], team[5]
		new size = read_args(args, charsmax(args))
		// client_print(id, print_chat, "%d", size)
		remove_quotes(args)
		
		get_time("%H:%M:%S", cur_hours, charsmax(cur_hours))	
		get_time("%m/%d/%Y", cur_date, charsmax(cur_date))
		get_user_name(id, name, charsmax(name))
		switch(get_user_team(id)) {
			case 0: copy(team, charsmax(team), "NOT")
			case 1: copy(team, charsmax(team), "T")
			case 2: copy(team, charsmax(team), "CT")
			case 3: copy(team, charsmax(team), "SPEC")
		}
		
		formatex(main_holder[len], charsmax(main_holder) - len, "^nC %s - %s: %s%s%s: %s: %s", 
		cur_date, cur_hours, team, (args[0] == '@' && (player_flags & ADMIN_CHAT)) ? "admin-chat:" : "", is_user_alive(id) ? "" : "(dead)", name, args)
		
		new file[100], file_handle
				
		get_time("%Y%m%d", cur_date, charsmax(cur_date))
		get_basedir(file, charsmax(file))
	
		
		format(file, charsmax(file), "%s/%s", file, SAY_CHAT_DIR)
		if(!dir_exists(file)) mkdir(file)
		format(file, charsmax(file), "%s/Chat-%s.log", file, cur_date)
			
		if(get_pcvar_num(cvar_log_chat_dubbing) && size > 6) {
			
			new linedata[300], found
			file_handle = fopen(file, "rt")
				
			while(file_handle && !feof(file_handle)) {
				
				fgets(file_handle, linedata, charsmax(linedata))
				
				if(containi(linedata, args) != -1) {
					found = true
					break;
				}
			}
			fclose(file_handle)
			
			if(!found) {
				if(file_exists(file))
					file_handle = fopen(file, "at")
				else
					file_handle = fopen(file, "wt")
					
				if(file_handle)
					fputs(file_handle, main_holder)
						
				fclose(file_handle)
			}
		}
		else {
			if(file_exists(file))
					file_handle = fopen(file, "at")
				else
					file_handle = fopen(file, "wt")
					
			if(file_handle)
				fputs(file_handle, main_holder)
					
			fclose(file_handle)
		}
	}
	
	return PLUGIN_CONTINUE
}

public client_say_team(id) {

	if(is_user_bot(id) && !get_pcvar_num(cvar_log_bots)) return PLUGIN_CONTINUE
	
	new cvar_value = get_pcvar_num(cvar_log_chat)
	new separate = get_pcvar_num(cvar_log_separate_by_flag)
	new player_flags = get_user_flags(id)
	new flags_string[23]
	get_pcvar_string(cvar_log_player_flag, flags_string, charsmax(flags_string))
	new flags = read_flags(flags_string)
	
	if((cvar_value == 1 || cvar_value == 3) && (flags == 0 || (player_flags & flags) || separate)) {
	
		new main_holder[200], args[150], cur_date[20], cur_hours[20], len, name[64], team[5]
		new size = read_args(args, charsmax(args))
		remove_quotes(args)
		
		get_time("%H:%M:%S", cur_hours, charsmax(cur_hours))	
		get_time("%m/%d/%Y", cur_date, charsmax(cur_date))
		get_user_name(id, name, charsmax(name))
		switch(get_user_team(id)) {
			case 0: copy(team, charsmax(team), "NOT")
			case 1: copy(team, charsmax(team), "T")
			case 2: copy(team, charsmax(team), "CT")
			case 3: copy(team, charsmax(team), "SPEC")
		}
		
		formatex(main_holder[len], charsmax(main_holder) - len, "^nC %s - %s: %s%s(team)%s: %s: %s", 
		cur_date, cur_hours, (args[0] == '@' && (player_flags & ADMIN_CHAT)) ? "admin-chat:" : "", team, is_user_alive(id) ? "" : "(dead)", name, args)
		
		new file[100], file_handle
				
		get_time("%Y%m%d", cur_date, charsmax(cur_date))
		get_basedir(file, charsmax(file))
	
		
		format(file, charsmax(file), "%s/%s", file, SAY_CHAT_DIR)
		if(!dir_exists(file)) mkdir(file)
		format(file, charsmax(file), "%s/Chat-%s.log", file, cur_date)
		
		
		if(get_pcvar_num(cvar_log_chat_dubbing) && size > 6) {
			
			new linedata[300], found
			file_handle = fopen(file, "rt")
				
			while(file_handle && !feof(file_handle)) {
				
				fgets(file_handle, linedata, charsmax(linedata))
				
				if(containi(linedata, args) != -1) {
					found = true
					break;
				}
			}
			fclose(file_handle)
			
			if(!found) {
				if(file_exists(file))
					file_handle = fopen(file, "at")
				else
					file_handle = fopen(file, "wt")
					
				if(file_handle)
					fputs(file_handle, main_holder)
						
				fclose(file_handle)
			}
		}
		else {
			if(file_exists(file))
					file_handle = fopen(file, "at")
				else
					file_handle = fopen(file, "wt")
					
			if(file_handle)
				fputs(file_handle, main_holder)
					
			fclose(file_handle)
		}
	}
	
	return PLUGIN_CONTINUE
}
print_details(id, log, console, chat, flagged_player, separate, type_data) {
	
	new authid[20], ip[20], name[40]//, country[20] = ""
		
	get_user_authid(id, authid, charsmax(authid))
	get_user_ip(id, ip, charsmax(ip), 1)
	get_user_name(id, name, charsmax(name))
	
	// geoip_country_ex(ip, country, charsmax(country))
		
	server_cmd("dp_clientinfo %d", id)
	server_exec()
		
	new log_data_string_start[50], log_data_string[200], len, cur_date[20], cur_hours[20], cvar_data_string[20], cvar_data
			
	get_pcvar_string(cvar_log_data, cvar_data_string, charsmax(cvar_data_string))
	cvar_data = read_flags(cvar_data_string)
	
	if(log) {
		get_time("%H:%M:%S", cur_hours, charsmax(cur_hours))	
		get_time("%Y/%m/%d", cur_date, charsmax(cur_date))
	}

	new comma
	if(log) { 
		formatex(log_data_string_start[len], charsmax(log_data_string_start) - len, "^nD %s, %s", cur_date, cur_hours)
	}
	if(cvar_data & (1<<0)) {
		len += formatex(log_data_string[len], charsmax(log_data_string) - len, "%s, ", name)
		comma = true;	
	}
	if(cvar_data & (1<<1)) {
		len += formatex(log_data_string[len], charsmax(log_data_string) - len, "%s", ip); 
		comma = true;
	}
	if(cvar_data & (1<<2) && comma) {
		len += formatex(log_data_string[len], charsmax(log_data_string) - len, ", ")
	}
	if(cvar_data & (1<<2)) {
		len += formatex(log_data_string[len], charsmax(log_data_string) - len, "%s", authid); comma = true;
	}
	// if(cvar_data & (1<<3) && comma) {
	// 	len += formatex(log_data_string[len], charsmax(log_data_string) - len, ",")
	// }
	// if(cvar_data & (1<<3)) len += formatex(log_data_string[len], charsmax(log_data_string) - len, " Country: %s", country)
	
	if(chat) {
			
		new log_chat_data_string[191], len, cvar_data_string[20], cvar_data
			
		get_pcvar_string(cvar_log_chat_data, cvar_data_string, charsmax(cvar_data_string))
		cvar_data = read_flags(cvar_data_string)
		comma = false	
		if(cvar_data & (1<<0)) {len += formatex(log_chat_data_string[len], charsmax(log_chat_data_string) - len, " /gNick: /y%s", name); comma = true;}
		if(cvar_data & (1<<0)) len += formatex(log_chat_data_string[len], charsmax(log_chat_data_string) - len, ",")
		if(cvar_data & (1<<1)) {len += formatex(log_chat_data_string[len], charsmax(log_chat_data_string) - len, " /gIP: /y%s", ip); comma = true;}
		if(cvar_data & (1<<2) && comma) len += formatex(log_chat_data_string[len], charsmax(log_chat_data_string) - len, ",")
		if(cvar_data & (1<<2)) {len += formatex(log_chat_data_string[len], charsmax(log_chat_data_string) - len, " /gSteamID: /y%s", authid); comma = true;}
		if(cvar_data & (1<<3) && comma) len += formatex(log_chat_data_string[len], charsmax(log_chat_data_string) - len, ",")
		// if(cvar_data & (1<<3)) {len += formatex(log_chat_data_string[len], charsmax(log_chat_data_string) - len, " /gCountry: /y%d", country); comma = true;}
		
		client_printcolor("/g[AMXX]%s", log_chat_data_string)
		if(get_pcvar_num(cvar_log_chat_sound)) client_cmd(0, "spk /sound/fvox/blip.wav")
	}
	if(console) server_print("%s", log_data_string)
		
	if(!log) return PLUGIN_HANDLED
	
	new file[100], file_handle
			
	get_time("%Y%m%d", cur_date, charsmax(cur_date))
	get_basedir(file, charsmax(file))
	
	format(file, charsmax(file), "%s/%s", file, type_data ? DISCONNECT_LOG_DIR : CONNECT_LOG_DIR)
	if(!dir_exists(file)) mkdir(file)
	format(file, charsmax(file), "%s/IO-%s.log", file, cur_date)
	
			
	if(get_pcvar_num(cvar_log_dubbing)) {
				
		new linedata[300], found
		file_handle = fopen(file, "rt")
			
		while (file_handle && !feof(file_handle)) {
			
			fgets(file_handle, linedata, charsmax(linedata))
			
			if(containi(name, linedata)  != -1 || containi(authid, linedata)  != -1 || containi(ip, linedata) != -1) {
				found = true
				break;
			}
		}
		fclose(file_handle)
		
		if(!found) {
			if(file_exists(file))
				file_handle = fopen(file, "at")
			else
				file_handle = fopen(file, "wt")
				
			if(file_handle) {
				format(log_data_string, charsmax(log_data_string), "%s%s", log_data_string_start, log_data_string)
				fputs(file_handle, log_data_string)
			}
					
			fclose(file_handle)
		}
	}
	else {
		if(file_exists(file))
			file_handle = fopen(file, "at")
		else
			file_handle = fopen(file, "wt")
			
		if(file_handle) {
			format(log_data_string, charsmax(log_data_string), "%s%s", log_data_string_start, log_data_string)
			fputs(file_handle, log_data_string)
		}
				
		fclose(file_handle)
	}
	return PLUGIN_CONTINUE
}

set_map_names() {
	
	new cur_date[20], file_handle, holder[100], map_name[30], base[40], file[100], new_file
	
	new cvar_num = get_pcvar_num(cvar_log_type_data)
	new cvar_num2 = get_pcvar_num(cvar_log_separate_by_flag)
	get_mapname(map_name, charsmax(map_name))
	get_basedir(base, charsmax(base))
	get_time("%Y%m%d", cur_date, charsmax(cur_date))
	
	if(cvar_num == 1 || cvar_num == 3) {
			
		format(file, charsmax(file), "%s/%s", base, CONNECT_LOG_DIR)
		if(!dir_exists(file)) mkdir(file)
		format(file, charsmax(file), "%s/IO-%s.log", file, cur_date)
		
		if(file_exists(file))
			file_handle = fopen(file, "at")
		else {
			file_handle = fopen(file, "wt")
			new_file = true
		}
		
		formatex(holder, charsmax(holder), "%s-------------------- %s --------------------", new_file ? "" : "^n", map_name)
		fputs(file_handle, holder)
		fclose(file_handle)
	}
	holder[0]=0
	new_file = false

	cvar_num = get_pcvar_num(cvar_log_chat)
	holder[0]=0
	new_file = false
	if(cvar_num == 1 || cvar_num == 3) {
		
		format(file, charsmax(file), "%s/%s", base, SAY_CHAT_DIR)
		if(!dir_exists(file)) mkdir(file)
		format(file, charsmax(file), "%s/Chat-%s.log", file, cur_date)
		
		if(file_exists(file))
			file_handle = fopen(file, "at")
		else {
			file_handle = fopen(file, "wt")
			new_file = true
		}
		
		formatex(holder, charsmax(holder), "%s-------------------- %s --------------------", new_file ? "" : "^n", map_name)
		fputs(file_handle, holder)
		fclose(file_handle)
		
	}
}

delete_old_files() {
	
	new files_num, base[40], file[100]
	
	new cvar_num = get_pcvar_num(cvar_log_type_data)
	new cvar_num2 = get_pcvar_num(cvar_log_separate_by_flag)
	get_basedir(base, charsmax(base))
	
	if(cvar_num == 1 || cvar_num == 3) {
		formatex(file, charsmax(file), "%s/%s/IO-%s.log", base, CONNECT_LOG_DIR, delete_date[0])
		if(delete_file(file)) files_num++
		file[0]=0
		formatex(file, charsmax(file), "%s/%s/IO-%s.log", base, CONNECT_LOG_DIR, delete_date[1])
		if(delete_file(file)) files_num++
		file[0]=0
		formatex(file, charsmax(file), "%s/%s/IO-%s.log", base, CONNECT_LOG_DIR, delete_date[2])
		if(delete_file(file)) files_num++
		file[0]=0
	}
	
	cvar_num = get_pcvar_num(cvar_log_chat)
	
	if(cvar_num == 1 || cvar_num == 3) {
		format(file, charsmax(file), "%s/%s/Chat-%s.log", base, SAY_CHAT_DIR, delete_date[0])
		if(delete_file(file)) files_num++
		file[0]=0
		format(file, charsmax(file), "%s/%s/Chat-%s.log", base, SAY_CHAT_DIR, delete_date[1])
		if(delete_file(file)) files_num++
		file[0]=0
		format(file, charsmax(file), "%s/%s/Chat-%s.log", base, SAY_CHAT_DIR, delete_date[2])
		if(delete_file(file)) files_num++
		
	}
	return files_num
}

public get_delete_date(days_old) {
	
	new todaysmonth[32]
	new todaysday[32]
	new todaysyear[32]
	get_time("%m",todaysmonth,31)
	get_time("%d",todaysday,31)
	get_time("%Y",todaysyear,31)
	new day = str_to_num(todaysday)
	months = str_to_num(todaysmonth)
	years = str_to_num(todaysyear)
	days = day - days_old
	
	switch(months) {
		case 1: {
			if(days<0) thirtyone()
			else makenewdate()
		}
		case 2: {
			if(days<0) february()
			else makenewdate()
		}
		case 3: {
			if(days<0) thirtyone()
			else makenewdate()
		}
		case 4: {
			if(days<0) thirty()
			else makenewdate()
		}
		case 5: {
			if(days<0) thirtyone()
			else makenewdate()
		}
		case 6: {
			if(days<0) thirty()
			else makenewdate()
		}
		case 7: {
			if(days<0) thirtyone()
			else makenewdate()
		}
		case 8: {
			if(days<0) thirtyone()
			else makenewdate()
		}
		case 9: {
			if(days<0) thirty()
			else makenewdate()
		}
		case 10: {
			if(days<0) thirtyone()
			else makenewdate() 
		}
		case 11: {
			if(days<0) thirty()
			else makenewdate()
		}
		case 12: {
			if(days<0) december()	
			else makenewdate()
		}
	}
}

public makenewdate() {
	formatex(delete_date[0], 29, "%d%s%d%s%d", years, (months<10) ? "0" : "", months, (days<10) ? "0" : "", days)
	if(days-1>0) days-=1
	formatex(delete_date[1], 29, "%d%s%d%s%d", years, (months<10) ? "0" : "", months, (days<10) ? "0" : "", days)
	if(days-2>0) days-=2
	formatex(delete_date[2], 29, "%d%s%d%s%d", years, (months<10) ? "0" : "", months, (days<10) ? "0" : "", days)
}

public december()
{
	if(days<0)
	{
		days = days + 31
		years = years - 1
		months = 1
		select_days()
	}
	else makenewdate()
}

public thirtyone()
{
	if(days<0)
	{
		days = days + 31
		months = months - 1
		select_days()
	}
	else makenewdate()
}

public thirty()
{
	if(days<0)
	{
		days = days + 30
		months = months - 1
		select_days()
	}
	else makenewdate()
}

public february()
{
	if(days<0)
	{
		days = days + 28
		months = 3
		select_days()
	}
	else makenewdate()
}

public select_days()
{
	switch(months) {
		case 1, 4, 5, 7, 8, 10: thirtyone()
		case 2: february()
		case 3, 6, 9, 11: thirty()
		case 12: december()
	}
}

stock client_printcolor(const input[], any:...)
{
	
	new iCount = 1, iPlayers[32]
	
	static szMsg[191]
	vformat(szMsg, charsmax(szMsg), input, 2)
	
	replace_all(szMsg, 190, "/g", "^4") // green txt
	replace_all(szMsg, 190, "/y", "^1") // orange txt
	
	get_players(iPlayers, iCount, "ch")
		
	for (new i = 0; i < iCount; i++)
	{
		if (is_user_connected(iPlayers[i]))
		{
			message_begin(MSG_ONE_UNRELIABLE, g_msgSayText, _, iPlayers[i])
			write_byte(iPlayers[i])
			write_string(szMsg)
			message_end()
		}
	}
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1063\\ f0\\ fs16 \n\\ par }
*/
